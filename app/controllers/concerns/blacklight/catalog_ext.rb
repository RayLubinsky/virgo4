# app/controllers/concerns/blacklight/catalog_ext.rb
#
# frozen_string_literal: true
# warn_indent:           true

__loading_begin(__FILE__)

require 'blacklight/lens'

module Blacklight::CatalogExt

  extend ActiveSupport::Concern

  include Blacklight::Catalog

  include Blacklight::BaseExt
  include Blacklight::DefaultComponentConfiguration

  # Code to be added to the controller class including this module.
  included do |base|

    __included(base, 'Blacklight::CatalogExt')

    include RescueConcern
    include ExportConcern
    include MailConcern
    include LensConcern

    # =========================================================================
    # :section: Helpers
    # =========================================================================

    helper_method :has_query?

    # =========================================================================
    # :section:
    # =========================================================================

    public

    # Initialize controller instance and set the Blacklight configuration from
    # the class.
    #
    def initialize
      super
      @blacklight_config ||= blacklight_config_for(self)
    end

  end

  # ===========================================================================
  # :section: Blacklight::Catalog overrides
  # ===========================================================================

  public

  # == GET /catalog
  # Get search results from the Solr index.
  #
  # @see SolrConcern#get_solr_results
  #
  # This method overrides:
  # @see Blacklight::Catalog#index
  #
  def index
    @response, @document_list = search_results(params)
    respond_to do |format|
      format.html { store_preferred_view }
      format.rss  { render layout: false }
      format.atom { render layout: false }
      format.json { @presenter = json_presenter(@response, @document_list) }
      additional_response_formats(format)
      document_export_formats(format)
    end
  end

  # == GET /catalog/:id
  # == GET /:lens/:id
  # Get a single document from the index.
  #
  # @see SolrConcern#get_solr_item
  #
  # This method overrides:
  # @see Blacklight::Catalog#show
  #
  def show
    super
  end

  # == POST /catalog/:id/track
  # == POST /:lens/:id/track
  # Updates the search counter (allows the show view to paginate).
  #
  # This method overrides:
  # @see Blacklight::Catalog#track
  #
  def track
    super
  end

  # == GET /catalog/facet/:id
  # == GET /:lens/facet/:id
  # Displays values and pagination links for a single facet field.
  #
  # This method overrides:
  # @see Blacklight::Catalog#facet
  #
  def facet
    super
  end

  # == GET /catalog/opensearch
  # == GET /:lens/opensearch
  # Method to serve up XML OpenSearch description and JSON autocomplete
  # response.
  #
  # This method overrides:
  # @see Blacklight::Catalog#opensearch
  #
  def opensearch
    super
  end

  # ===========================================================================
  # :section: Blacklight::Catalog overrides
  # ===========================================================================

  protected

  # Used by the method generated by #add_show_tools_partial as the path to
  # redirect to after a POST to the tool route.
  #
  # This method overrides:
  # @see Blacklight::Catalog#action_success_redirect_path
  #
  def action_success_redirect_path
    id     = params[:id]
    lens   = Blacklight::Lens.key_for_doc(id)
    config = blacklight_config(lens)
    doc    = config.document_model.new(id: id)
    search_state(lens).url_for_document(doc)
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  protected

  # Indicate whether there has been a query issued by the user.
  #
  def has_query?
    params[:q].present? && (params[:q] != '*')
  end

  # ===========================================================================
  # :section: Blacklight::Catalog overrides
  # non-routable methods ->
  # ===========================================================================

  protected

  # Overrides the Blacklight::Controller provided #search_action_url.
  #
  # By default, any search action from a Blacklight::Catalog controller should
  # use the current controller when constructing the route.
  #
  # @param [Hash] options
  #
  # @return [String]
  #
  # This method overrides:
  # @see Blacklight::Catalog#search_action_url
  #
  def search_action_url(options = nil)
    opt = { controller: current_lens_key, action: 'index' }
    opt.reverse_merge!(options) if options.is_a?(Hash)
    url_for(opt)
  end

end

__loading_end(__FILE__)
