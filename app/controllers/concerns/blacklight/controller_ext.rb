# app/controllers/concerns/blacklight/controller_ext.rb
#
# frozen_string_literal: true
# warn_indent:           true

__loading_begin(__FILE__)

require 'blacklight/lens'
require 'uva'

# Filters added to this controller apply to all controllers in the
# hosting application as this module is mixed-in to the application controller
# in the hosting app on installation.
#
# @see Blacklight::Controller
#
module Blacklight::ControllerExt

  extend ActiveSupport::Concern

  include Blacklight::Controller

  # Code to be added to the controller class including this module.
  included do |base|

    __included(base, 'Blacklight::ControllerExt')

    include LensConcern
    include UVA::Networks
    include Blacklight::SearchFieldsExt
    helper  Blacklight::SearchFieldsExt

    self.search_state_class = Blacklight::SearchStateExt

  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  module ClassMethods

    # _prefixes
    #
    # @return [Array<String>]
    #
    # This method overrides:
    # @see ActionView::ViewPaths::ClassMethods#_prefixes
    #
    def _prefixes # :nodoc:
      return local_prefixes if superclass.abstract?
      @_prefixes ||= (
        local_prefixes +
        [Blacklight::Lens.default_key.to_s] +
        superclass._prefixes
      ).uniq
    end

  end

  # ===========================================================================
  # :section: Blacklight::Controller overrides
  # ===========================================================================

  public

  # Undo the delegation of :blacklight_config to :default_catalog_controller
  # that is performed by Blacklight::Controller.
  #
  # This uses the same signature as the one generated by #delegate.
  #
  def blacklight_config(*args, &block)
    blacklight_config_for(args.first)
  end

  # ===========================================================================
  # :section: Blacklight::Controller overrides
  # ===========================================================================

  protected

  # A memo-ized instance of the parameter state.
  #
  # @return [Blacklight::SearchStateExt]
  #
  # This method overrides:
  # @see Blacklight::Controller#search_state
  #
  def search_state
    @search_state ||=
      if (ssa = search_state_class.instance_method(:initialize).arity) == -3
        search_state_class.new(params, blacklight_config, self)
      elsif ssa != -2
        ss = search_state_class.new
        methods =
          ss.methods - ss.class.ancestors[1..-1].flat_map(&:methods).uniq
        raise "search_state_class arity #{ssa} [#{search_state_class}]; methods #{methods}"
      else
        Deprecation.warn(search_state_class,
          "The constructor for #{search_state_class} now requires a third " \
          'argument. Invoking it with 2 arguments is deprecated and will be ' \
          'removed in Blacklight 7.'
        )
        search_state_class.new(params, blacklight_config)
      end
  end

  # search_facet_url
  #
  # @param [Hash] options
  #
  # @return [String]
  #
  # @deprecated Use self#search_facet_path
  #
  # This method overrides:
  # @see Blacklight::Controller#search_facet_url
  #
  def search_facet_url(options = nil)
    opt = { only_path: false }
    opt.merge!(options) if options.present?
    search_facet_path(opt)
  end
  deprecate(search_facet_url: 'Use search_facet_path instead.')

  # This overrides the Blacklight method only to silence deprecation warnings.
  #
  # @param [Hash] options
  #
  # @return [String]
  #
  # This method overrides:
  # @see Blacklight::Controller#search_facet_path
  #
  def search_facet_path(options = nil)
    opt = search_state.to_h.merge(only_path: true)
    opt.merge!(options) if options.present?
    opt.merge!(controller: current_lens_key, action: 'facet')
    opt.except!(:page)
    url_for(opt)
  end

end

__loading_end(__FILE__)
